Q.1 Write a program to illustrate the concept of orphan process ( Using fork() and sleep()) 
[10 marks]

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t p;
    printf("Before fork\n");
    p = fork();

    if (p == 0) {
        sleep(5);
        printf("I am child with PID %d\n", getpid());
        printf("My Parent PID is %d\n", getppid());
    } else {
        printf("I am parent with PID %d\n", getpid());
        printf("My child PID is %d\n", p);
    }
    return 0;
}


 
Q.2 Write the program to simulate Non-preemptive Priority scheduling. The arrival time and first 
CPU burst and priority for different n number of processes should be input to the algorithm. 
Assume the fixed IO waiting time (2 units). The next CPU-burst should be generated randomly. 
The output should give Gantt chart, turnaround time and waiting time for each process. Also find 
the average waiting time and turnaround time.. 

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define MAX 20
#define IO_WAIT 2    

typedef struct {
    int pid;
    int arrival;
    int burst1;
    int burst2;
    int priority;
    int completion;
    int turnaround;
    int waiting;
    int done;
} Process;

int main() {
    Process p[MAX];
    int n, completed = 0, current_time = 0;
    float avgTAT = 0, avgWT = 0;
    srand(time(NULL));

    printf("Enter number of processes: ");
    scanf("%d", &n);

    for(int i=0; i<n; i++) {
        p[i].pid = i+1;
        printf("\nEnter arrival time of P%d: ", p[i].pid);
        scanf("%d", &p[i].arrival);
        printf("Enter first CPU burst of P%d: ", p[i].pid);
        scanf("%d", &p[i].burst1);
        printf("Enter priority of P%d (smaller number = higher priority): ", p[i].pid);
        scanf("%d", &p[i].priority);
        p[i].burst2 = (rand() % 10) + 1;
        p[i].done = 0;
    }

    printf("\n\nGantt Chart:\n");
    while(completed < n) {
        int idx = -1;
        int best_priority = 99999;
        for(int i=0; i<n; i++) {
            if(!p[i].done && p[i].arrival <= current_time) {
                if(p[i].priority < best_priority) {
                    best_priority = p[i].priority;
                    idx = i;
                } else if(p[i].priority == best_priority) {
                    if(p[i].arrival < p[idx].arrival) {
                        idx = i;
                    }
                }
            }
        }

        if(idx == -1) {
            current_time++;
            continue;
        }

        printf("| P%d ", p[idx].pid);
        if(current_time < p[idx].arrival)
            current_time = p[idx].arrival;

        current_time += p[idx].burst1;
        current_time += IO_WAIT;
        current_time += p[idx].burst2;

        p[idx].completion = current_time;
        p[idx].turnaround = p[idx].completion - p[idx].arrival;
        p[idx].waiting = p[idx].turnaround - (p[idx].burst1 + p[idx].burst2);
        avgTAT += p[idx].turnaround;
        avgWT += p[idx].waiting;
        p[idx].done = 1;
        completed++;
    }

    printf("|\n");
    printf("\nProcess\tAT\tBT1\tBT2\tPri\tCT\tTAT\tWT");
    for(int i=0; i<n; i++) {
        printf("\nP%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d",
               p[i].pid, p[i].arrival, p[i].burst1, p[i].burst2, p[i].priority,
               p[i].completion, p[i].turnaround, p[i].waiting);
    }

    printf("\n\nAverage Turnaround Time = %.2f", avgTAT/n);
    printf("\nAverage Waiting Time = %.2f\n", avgWT/n);

    return 0;
}



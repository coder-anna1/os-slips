Q.1 Write a program to illustrate the concept of orphan process ( Using fork() and sleep()) 
[10 marks]

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t p;
    printf("Before fork\n");
    p = fork();

    if (p == 0) {
        sleep(5);
        printf("I am child with PID %d\n", getpid());
        printf("My Parent PID is %d\n", getppid());
    } else {
        printf("I am parent with PID %d\n", getpid());
        printf("My child PID is %d\n", p);
    }
    return 0;
}


 
Q.2 Write the program to simulate Non-preemptive Priority scheduling. The arrival time and first 
CPU burst and priority for different n number of processes should be input to the algorithm. 
Assume the fixed IO waiting time (2 units). The next CPU-burst should be generated randomly. 
The output should give Gantt chart, turnaround time and waiting time for each process. Also find 
the average waiting time and turnaround time.. 

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define MAX 20
#define IO_WAIT 2    

typedef struct {
    int pid;
    int arrival;
    int burst1;
    int burst2;
    int priority;
    int completion;
    int turnaround;
    int waiting;
    int done;
} Process;

int main() {
    Process p[MAX];
    int n, completed = 0, current_time = 0;
    float avgTAT = 0, avgWT = 0;
    srand(time(NULL));

    printf("Enter number of processes: ");
    scanf("%d", &n);

    for(int i=0; i<n; i++) {
        p[i].pid = i+1;
        printf("\nEnter arrival time of P%d: ", p[i].pid);
        scanf("%d", &p[i].arrival);
        printf("Enter first CPU burst of P%d: ", p[i].pid);
        scanf("%d", &p[i].burst1);
        printf("Enter priority of P%d (smaller number = higher priority): ", p[i].pid);
        scanf("%d", &p[i].priority);
        p[i].burst2 = (rand() % 10) + 1;
        p[i].done = 0;
    }

    printf("\n\nGantt Chart:\n");
    while(completed < n) {
        int idx = -1;
        int best_priority = 99999;
        for(int i=0; i<n; i++) {
            if(!p[i].done && p[i].arrival <= current_time) {
                if(p[i].priority < best_priority) {
                    best_priority = p[i].priority;
                    idx = i;
                } else if(p[i].priority == best_priority) {
                    if(p[i].arrival < p[idx].arrival) {
                        idx = i;
                    }
                }
            }
        }

        if(idx == -1) {
            current_time++;
            continue;
        }

        printf("| P%d ", p[idx].pid);
        if(current_time < p[idx].arrival)
            current_time = p[idx].arrival;

        current_time += p[idx].burst1;
        current_time += IO_WAIT;
        current_time += p[idx].burst2;

        p[idx].completion = current_time;
        p[idx].turnaround = p[idx].completion - p[idx].arrival;
        p[idx].waiting = p[idx].turnaround - (p[idx].burst1 + p[idx].burst2);
        avgTAT += p[idx].turnaround;
        avgWT += p[idx].waiting;
        p[idx].done = 1;
        completed++;
    }

    printf("|\n");
    printf("\nProcess\tAT\tBT1\tBT2\tPri\tCT\tTAT\tWT");
    for(int i=0; i<n; i++) {
        printf("\nP%d\t%d\t%d\t%d\t%d\t%d\t%d\t%d",
               p[i].pid, p[i].arrival, p[i].burst1, p[i].burst2, p[i].priority,
               p[i].completion, p[i].turnaround, p[i].waiting);
    }

    printf("\n\nAverage Turnaround Time = %.2f", avgTAT/n);
    printf("\nAverage Waiting Time = %.2f\n", avgWT/n);

    return 0;
}


or



Q.2 Write a C program to simulate Bankerâ€™s algorithm for the purpose of deadlock 
avoidance. Consider the following snapshot of system, A, B, C and D are the resource type. 
ALLOCATION MAX 
 A B C D A B C D 
P0 0 0 1 2 0 0 1 2 
P1 1 0 0 0 1 7 5 0 
P2 1 3 5 4 2 3 5 6 
P3 0 6 3 2 0 6 5 2 
P4 0 0 1 4 0 6 5 6 
 
AVAILABLE 
A B C D 
1 5 2 0

a) Calculate and display the content of need matrix? 
b) Is the system in safe state? If display the safe sequence. 
c) If a request from process P arrives for (0, 4, 2, 0) can it be granted immediately by keeping 
the system in safe state. Print a message. 


ans


#include <stdio.h>
#include <stdbool.h>

int main() {
    int n = 5, m = 4;
    int alloc[5][4] = {
        {0, 0, 1, 2},
        {1, 0, 0, 0},
        {1, 3, 5, 4},
        {0, 6, 3, 2},
        {0, 0, 1, 4}
    };

    int max[5][4] = {
        {0, 0, 1, 2},
        {1, 7, 5, 0},
        {2, 3, 5, 6},
        {0, 6, 5, 2},
        {0, 6, 5, 6}
    };

    int avail[4] = {1, 5, 2, 0};
    int need[5][4];
    int finish[5] = {0};
    int safeSeq[5];
    int count = 0;

    // Calculate Need matrix
    printf("Need Matrix:\n");
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }

    // Safety algorithm
    int work[4];
    for(int i = 0; i < m; i++) work[i] = avail[i];

    while(count < n) {
        bool found = false;
        for(int p = 0; p < n; p++) {
            if(finish[p] == 0) {
                int j;
                for(j = 0; j < m; j++)
                    if(need[p][j] > work[j])
                        break;
                if(j == m) {
                    for(int k = 0; k < m; k++)
                        work[k] += alloc[p][k];
                    safeSeq[count++] = p;
                    finish[p] = 1;
                    found = true;
                }
            }
        }
        if(!found) break;
    }

    if(count < n) {
        printf("\nThe system is NOT in a safe state.\n");
    } else {
        printf("\nThe system is in a SAFE state.\nSafe sequence: ");
        for(int i = 0; i < n; i++)
            printf("P%d ", safeSeq[i]);
        printf("\n");
    }

    // Check request from P1 -> (0,4,2,0)
    int reqP = 1;
    int request[4] = {0, 4, 2, 0};
    bool canGrant = true;

    for(int i = 0; i < m; i++) {
        if(request[i] > need[reqP][i]) {
            canGrant = false;
            break;
        }
        if(request[i] > avail[i]) {
            canGrant = false;
            break;
        }
    }

    if(canGrant) {
        printf("\nRequest (0,4,2,0) from P1 can be granted immediately.\n");
    } else {
        printf("\nRequest (0,4,2,0) from P1 CANNOT be granted immediately.\n");
    }

    return 0;
}


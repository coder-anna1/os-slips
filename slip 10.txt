Q.1 Write a program to illustrate the concept of orphan process (Using fork() and sleep()) 

#include<stdio.h>
#include<unistd.h>
#include<sys/types.h>

int main(){
    pid_t p;
    printf("\nBefore fork\n");
    p = fork();

    if(p == 0){
        sleep(5);
        printf("I am child having PID %d\n", getpid());
        printf("My Parent PID is %d\n", getppid());
    }
    else{
        printf("I am parent having PID %d\n", getpid());
        printf("My child PID is %d\n", p);
    }
    return 0;
}

Q.2 Write the simulation program to implement demand paging and show the page scheduling and 
total number of page faults for the following given page reference string. Give input n=3 as the 
number of memory frames. 
Reference String : 12,15,12,18,6,8,11,12,19,12,6,8,12,15,19,8 


#include <stdio.h>
#define MAX 100

int main() {
    int referenceString[MAX] = {12,15,12,18,6,8,11,12,19,12,6,8,12,15,19,8};
    int frames[3], n = 3;
    int refLen = 16;
    int i, j, k, pageFaults = 0, found, pos = 0;

    for(i = 0; i < n; i++) {
        frames[i] = -1;
    }

    printf("\nPage Replacement Process (FIFO):\n");

    for(i = 0; i < refLen; i++) {
        found = 0;
        for(j = 0; j < n; j++) {
            if(frames[j] == referenceString[i]) {
                found = 1;
                break;
            }
        }

        if(!found) {
            frames[pos] = referenceString[i];
            pos = (pos + 1) % n;
            pageFaults++;

            printf("Step %2d: ", i+1);
            for(k = 0; k < n; k++) {
                if(frames[k] != -1) printf("%d ", frames[k]);
                else printf("- ");
            }
            printf("<- Page Fault\n");
        } else {
            printf("Step %2d: ", i+1);
            for(k = 0; k < n; k++) {
                if(frames[k] != -1) printf("%d ", frames[k]);
                else printf("- ");
            }
            printf("<- No Page Fault\n");
        }
    }

    printf("\nTotal Page Faults = %d\n", pageFaults);
    return 0;
}


Q.2 Write the simulation program using FCFS. The arrival time and first CPU bursts of different 
jobs should be input to the system. Assume the fixed I/O waiting time (2 units). The next CPU 
burst should be generated using random function. The output should give the Gantt chart, 
Turnaround Time and Waiting time for each process and average times. 



#include <stdio.h>
#include <stdlib.h>
#include <time.h>

typedef struct {
    char name[10];
    int arrival;
    int burst;
    int completion;
    int turnaround;
    int waiting;
} Process;

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process p[n];
    srand(time(0));

    for(int i = 0; i < n; i++) {
        printf("Enter process name: ");
        scanf("%s", p[i].name);
        printf("Enter arrival time: ");
        scanf("%d", &p[i].arrival);
        printf("Enter first CPU burst: ");
        scanf("%d", &p[i].burst);
    }

    int current_time = 0;
    int totalTAT = 0, totalWT = 0;

    printf("\nGantt Chart:\n");
    for(int i = 0; i < n; i++) {
        if(current_time < p[i].arrival)
            current_time = p[i].arrival;

        printf("| %d %s %d ", current_time, p[i].name, current_time + p[i].burst);

        p[i].waiting = current_time - p[i].arrival;
        current_time += p[i].burst + 2 + rand() % 10; // CPU + I/O wait + next CPU burst
        p[i].completion = current_time;
        p[i].turnaround = p[i].completion - p[i].arrival;
        totalTAT += p[i].turnaround;
        totalWT += p[i].waiting;
    }
    printf("|\n");

    printf("\nProcess\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n");
    for(int i = 0; i < n; i++) {
        printf("%s\t%d\t%d\t%d\t\t%d\t\t%d\n",
               p[i].name, p[i].arrival, p[i].burst, p[i].completion,
               p[i].turnaround, p[i].waiting);
    }

    printf("\nAverage Turnaround Time: %.2f\n", (float)totalTAT / n);
    printf("Average Waiting Time: %.2f\n", (float)totalWT / n);

    return 0;
}


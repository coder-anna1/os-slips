Q.1 Write a program to create a child process using fork().The parent should goto sleep state and 
child process should begin its execution. In the child process, use execl() to execute the “ls” 
command. 

#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        printf("Fork failed\n");
        return 1;
    }

    if (pid == 0) {
        execl("/bin/ls", "ls", "-l", NULL);
        printf("execl failed\n");
        return 1;
    } else {
        printf("Parent PID: %d, going to sleep...\n", getpid());
        sleep(10);
        printf("Parent woke up\n");
    }

    return 0;
}


Q.2 Write the program to simulate Round Robin (RR) scheduling. The arrival time and first CPU- 
burst for different n number of processes should be input to the algorithm. Also give the time 
quantum as input. Assume the fixed IO waiting time (2 units). The next CPU-burst should be 
generated randomly. The output should give Gantt chart, turnaround time and waiting time for each 
process. Also find the average waiting time and turnaround time. 

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#define IO_WAIT 2

typedef struct {
    int pid;
    int arrival;
    int burst;
    int remaining;
    int completion;
    int turnaround;
    int waiting;
} Process;

int main() {
    int n, timeQuantum, completed = 0, currentTime = 0;
    float totalTAT = 0, totalWT = 0;
    srand(time(NULL));

    printf("Enter number of processes: ");
    scanf("%d", &n);

    Process p[n];
    for (int i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter arrival time of P%d: ", i + 1);
        scanf("%d", &p[i].arrival);
        printf("Enter first CPU burst of P%d: ", i + 1);
        scanf("%d", &p[i].burst);
        p[i].remaining = p[i].burst;
    }

    printf("Enter Time Quantum: ");
    scanf("%d", &timeQuantum);

    printf("\nGantt Chart:\n");
    while (completed < n) {
        int doneInThisCycle = 0;
        for (int i = 0; i < n; i++) {
            if (p[i].remaining > 0 && p[i].arrival <= currentTime) {
                int execTime = (p[i].remaining < timeQuantum) ? p[i].remaining : timeQuantum;
                printf("| P%d (%d-%d) ", p[i].pid, currentTime, currentTime + execTime);
                currentTime += execTime;
                p[i].remaining -= execTime;

                if (p[i].remaining == 0) {
                    currentTime += IO_WAIT + (rand() % 10 + 1); // IO wait + next random burst
                    p[i].completion = currentTime;
                    p[i].turnaround = p[i].completion - p[i].arrival;
                    p[i].waiting = p[i].turnaround - p[i].burst;
                    totalTAT += p[i].turnaround;
                    totalWT += p[i].waiting;
                    completed++;
                }
                doneInThisCycle = 1;
            }
        }
        if (!doneInThisCycle) {
            currentTime++;
        }
    }
    printf("|\n\n");

    printf("Process\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t\t%d\n", p[i].pid, p[i].arrival, p[i].burst,
               p[i].completion, p[i].turnaround, p[i].waiting);
    }

    printf("\nAverage Turnaround Time: %.2f\n", totalTAT / n);
    printf("Average Waiting Time: %.2f\n", totalWT / n);

    return 0;
}

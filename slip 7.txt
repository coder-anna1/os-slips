Q.1 Write a program to create a child process using fork().The parent should goto sleep state and 
child process should begin its execution. In the child process, use execl() to execute the “ls” 
command

#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        printf("Fork failed!\n");
        return 1;
    }
    else if (pid == 0) {
        // Child process
        printf("Child process executing ls -l\n");
        execl("/bin/ls", "ls", "-l", (char *)NULL);
        // Only runs if execl fails
        printf("execl failed!\n");
        exit(1);
    }
    else {
        // Parent process
        printf("Parent going to sleep...\n");
        sleep(10);
        printf("Parent woke up!\n");
    }

    return 0;
}


Q.2 Write the simulation program using FCFS. The arrival time and first CPU bursts of different 
jobs should be input to the system. Assume the fixed I/O waiting time (2 units). The next CPU 
burst should be generated using random function. The output should give the Gantt chart, 
Turnaround Time and Waiting time for each process and average times


#include <stdio.h>
#include <stdlib.h>
#include <time.h>

struct Process {
    int pid, at, bt, ct, tat, wt;
};

int main() {
    int n, i, time = 0;
    float avgTAT = 0, avgWT = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    struct Process p[n];
    srand(time(NULL));

    for (i = 0; i < n; i++) {
        p[i].pid = i + 1;
        printf("Enter Arrival Time of P%d: ", p[i].pid);
        scanf("%d", &p[i].at);
        printf("Enter First CPU Burst of P%d: ", p[i].pid);
        scanf("%d", &p[i].bt);
        p[i].bt += 2 + (rand() % 5);
    }

    printf("\nGantt Chart:\n");
    for (i = 0; i < n; i++) {
        if (time < p[i].at)
            time = p[i].at;
        printf("| P%d ", p[i].pid);
        time += p[i].bt;
        p[i].ct = time;
    }
    printf("|\n");

    printf("\nProcess\tAT\tBT\tCT\tTAT\tWT\n");
    for (i = 0; i < n; i++) {
        p[i].tat = p[i].ct - p[i].at;
        p[i].wt = p[i].tat - p[i].bt;
        avgTAT += p[i].tat;
        avgWT += p[i].wt;
        printf("P%d\t%d\t%d\t%d\t%d\t%d\n", p[i].pid, p[i].at, p[i].bt, p[i].ct, p[i].tat, p[i].wt);
    }

    printf("\nAverage Turnaround Time = %.2f", avgTAT / n);
    printf("\nAverage Waiting Time = %.2f\n", avgWT / n);

    return 0;
}


Q.2 Write the simulation program to implement demand paging and show the page scheduling 
and total number of page faults for the following given page reference string. Give input n as the 
number of memory frames. 
Reference String: 7, 0, 1, 2, 0, 3, 0, 4, 2, 3, 0, 3, 2 

#include <stdio.h>
#define MAX 50

int main() {
    int frames[MAX], refString[MAX];
    int n, refLen, pageFaults = 0;
    int i, j, pos = 0, found;

    printf("Enter number of memory frames: ");
    scanf("%d", &n);

    printf("Reference string length: ");
    scanf("%d", &refLen);

    printf("Enter the reference string:\n");
    for (i = 0; i < refLen; i++) {
        scanf("%d", &refString[i]);
    }

    for (i = 0; i < n; i++) {
        frames[i] = -1;
    }

    printf("\nPage Replacement Process (FIFO):\n");

    for (i = 0; i < refLen; i++) {
        found = 0;

        for (j = 0; j < n; j++) {
            if (frames[j] == refString[i]) {
                found = 1;
                break;
            }
        }

        if (!found) {
            frames[pos] = refString[i];
            pos = (pos + 1) % n;
            pageFaults++;
            printf("Step %2d: ", i + 1);
            for (j = 0; j < n; j++) {
                if (frames[j] != -1)
                    printf("%d ", frames[j]);
                else
                    printf("- ");
            }
            printf(" <- Page Fault\n");
        } else {
            printf("Step %2d: ", i + 1);
            for (j = 0; j < n; j++) {
                if (frames[j] != -1)
                    printf("%d ", frames[j]);
                else
                    printf("- ");
            }
            printf(" <- No Page Fault\n");
        }
    }

    printf("\nTotal Page Faults = %d\n", pageFaults);
    return 0;
}

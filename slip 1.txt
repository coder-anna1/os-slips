Q.1 Write a program that demonstrates the use of nice() system call. After a child process is started 
using fork(), assign higher priority to the child using nice() system call.


#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>
#include <sys/resource.h>  // Required for nice()

int main() {
    int pid, retnice;
    printf("Press Ctrl+Z to stop the process\n");
    pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    }

    if (pid == 0) {
        // Child process – assign higher priority (lower nice value)
        retnice = nice(-5);  
        printf("Child process started with PID %d\n", getpid());
        while (1) {
            printf("Child running with nice value: %d\n", retnice);
            fflush(stdout);
            sleep(1);
        }
    } else {
        // Parent process – keep default priority
        retnice = nice(0);
        printf("Parent process started with PID %d\n", getpid());
        while (1) {
            printf("Parent running with nice value: %d\n", retnice);
            fflush(stdout);
            sleep(1);
        }
    }

    return 0;
}


extra


#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>

int main() {
    int pid, retnice;
    printf("Press Ctrl+Z to stop the process\n");
    pid = fork();

    if(pid < 0) {
        exit(1);
    }

    if(pid == 0) {
        retnice = nice(5);
        while(1) {
            printf("Child running with nice value: %d\n", retnice);
            fflush(stdout);
            sleep(1);
        }
    } else {
        retnice = nice(0);
        while(1) {
            printf("Parent running with nice value: %d\n", retnice);
            fflush(stdout);
            sleep(1);
        }
    }

    return 0;
}


Q.2 Write the simulation program to implement demand paging and show the page scheduling 
and total number of page faults for the following given page reference string. Give input n=3 as 
the number of memory frames. 
Reference String :3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6 
Implement FIFO

#include <stdio.h>
#define MAX 100

int main() {
    int referenceString[MAX], frames[MAX], n = 3;
    int refLen = 15;
    int i, j, k, pageFaults = 0, found, pos = 0;

    int tempRef[] = {3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6};
    for(i = 0; i < refLen; i++)
        referenceString[i] = tempRef[i];

    for(i = 0; i < n; i++)
        frames[i] = -1;

    printf("Page Replacement Process (FIFO):\n");

    for(i = 0; i < refLen; i++) {
        found = 0;
        for(j = 0; j < n; j++) {
            if(frames[j] == referenceString[i]) {
                found = 1;
                break;
            }
        }
        if(!found) {
            frames[pos] = referenceString[i];
            pos = (pos + 1) % n;
            pageFaults++;
            printf("Step %2d: ", i + 1);
            for(k = 0; k < n; k++)
                printf("%d ", frames[k] != -1 ? frames[k] : -1);
            printf(" <- Page Fault\n");
        } else {
            printf("Step %2d: ", i + 1);
            for(k = 0; k < n; k++)
                printf("%d ", frames[k] != -1 ? frames[k] : -1);
            printf(" <- No Page Fault\n");
        }
    }

    printf("\nTotal Page Faults = %d\n", pageFaults);
    return 0;
}


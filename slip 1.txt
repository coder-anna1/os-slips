Q.1 Write a program that demonstrates the use of nice() system call. After a child process is started 
using fork(), assign higher priority to the child using nice() system call.


#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>
#include <sys/resource.h>  // Required for nice()

int main() {
    int pid, retnice;
    printf("Press Ctrl+Z to stop the process\n");
    pid = fork();

    if (pid < 0) {
        perror("Fork failed");
        exit(1);
    }

    if (pid == 0) {
        // Child process – assign higher priority (lower nice value)
        retnice = nice(-5);  
        printf("Child process started with PID %d\n", getpid());
        while (1) {
            printf("Child running with nice value: %d\n", retnice);
            fflush(stdout);
            sleep(1);
        }
    } else {
        // Parent process – keep default priority
        retnice = nice(0);
        printf("Parent process started with PID %d\n", getpid());
        while (1) {
            printf("Parent running with nice value: %d\n", retnice);
            fflush(stdout);
            sleep(1);
        }
    }

    return 0;
}


extra


#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>

int main() {
    int pid, retnice;
    printf("Press Ctrl+Z to stop the process\n");
    pid = fork();

    if(pid < 0) {
        exit(1);
    }

    if(pid == 0) {
        retnice = nice(5);
        while(1) {
            printf("Child running with nice value: %d\n", retnice);
            fflush(stdout);
            sleep(1);
        }
    } else {
        retnice = nice(0);
        while(1) {
            printf("Parent running with nice value: %d\n", retnice);
            fflush(stdout);
            sleep(1);
        }
    }

    return 0;
}


Q.2 Write the simulation program to implement demand paging and show the page scheduling 
and total number of page faults for the following given page reference string. Give input n=3 as 
the number of memory frames. 
Reference String :3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6 
Implement FIFO

#include <stdio.h>
#define MAX 100

int main() {
    int referenceString[MAX], frames[MAX], n = 3;
    int refLen = 15;
    int i, j, k, pageFaults = 0, found, pos = 0;

    int tempRef[] = {3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6};
    for(i = 0; i < refLen; i++)
        referenceString[i] = tempRef[i];

    for(i = 0; i < n; i++)
        frames[i] = -1;

    printf("Page Replacement Process (FIFO):\n");

    for(i = 0; i < refLen; i++) {
        found = 0;
        for(j = 0; j < n; j++) {
            if(frames[j] == referenceString[i]) {
                found = 1;
                break;
            }
        }
        if(!found) {
            frames[pos] = referenceString[i];
            pos = (pos + 1) % n;
            pageFaults++;
            printf("Step %2d: ", i + 1);
            for(k = 0; k < n; k++)
                printf("%d ", frames[k] != -1 ? frames[k] : -1);
            printf(" <- Page Fault\n");
        } else {
            printf("Step %2d: ", i + 1);
            for(k = 0; k < n; k++)
                printf("%d ", frames[k] != -1 ? frames[k] : -1);
            printf(" <- No Page Fault\n");
        }
    }

    printf("\nTotal Page Faults = %d\n", pageFaults);
    return 0;
}


or


Q.2 Write a C program to simulate Banker’s algorithm for the purpose of deadlock 
avoidance. Consider the following snapshot of system, A, B, C and D are the resource type. 
ALLOCATION MAX 
 A B C D A B C D 
P0 0 0 1 2 0 0 1 2 
P1 1 0 0 0 1 7 5 0 
P2 1 3 5 4 2 3 5 6 
P3 0 6 3 2 0 6 5 2 
P4 0 0 1 4 0 6 5 6 
 
AVAILABLE 
A B C D 
1 5 2 0

a) Calculate and display the content of need matrix? 
b) Is the system in safe state? If display the safe sequence. 
c) If a request from process P arrives for (0, 4, 2, 0) can it be granted immediately by keeping 
the system in safe state. Print a message. 


ans


#include <stdio.h>
#include <stdbool.h>

int main() {
    int n = 5, m = 4;
    int alloc[5][4] = {
        {0, 0, 1, 2},
        {1, 0, 0, 0},
        {1, 3, 5, 4},
        {0, 6, 3, 2},
        {0, 0, 1, 4}
    };

    int max[5][4] = {
        {0, 0, 1, 2},
        {1, 7, 5, 0},
        {2, 3, 5, 6},
        {0, 6, 5, 2},
        {0, 6, 5, 6}
    };

    int avail[4] = {1, 5, 2, 0};
    int need[5][4];
    int finish[5] = {0};
    int safeSeq[5];
    int count = 0;

    // Calculate Need matrix
    printf("Need Matrix:\n");
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
            printf("%d ", need[i][j]);
        }
        printf("\n");
    }

    // Safety algorithm
    int work[4];
    for(int i = 0; i < m; i++) work[i] = avail[i];

    while(count < n) {
        bool found = false;
        for(int p = 0; p < n; p++) {
            if(finish[p] == 0) {
                int j;
                for(j = 0; j < m; j++)
                    if(need[p][j] > work[j])
                        break;
                if(j == m) {
                    for(int k = 0; k < m; k++)
                        work[k] += alloc[p][k];
                    safeSeq[count++] = p;
                    finish[p] = 1;
                    found = true;
                }
            }
        }
        if(!found) break;
    }

    if(count < n) {
        printf("\nThe system is NOT in a safe state.\n");
    } else {
        printf("\nThe system is in a SAFE state.\nSafe sequence: ");
        for(int i = 0; i < n; i++)
            printf("P%d ", safeSeq[i]);
        printf("\n");
    }

    // Check request from P1 -> (0,4,2,0)
    int reqP = 1;
    int request[4] = {0, 4, 2, 0};
    bool canGrant = true;

    for(int i = 0; i < m; i++) {
        if(request[i] > need[reqP][i]) {
            canGrant = false;
            break;
        }
        if(request[i] > avail[i]) {
            canGrant = false;
            break;
        }
    }

    if(canGrant) {
        printf("\nRequest (0,4,2,0) from P1 can be granted immediately.\n");
    } else {
        printf("\nRequest (0,4,2,0) from P1 CANNOT be granted immediately.\n");
    }

    return 0;
}


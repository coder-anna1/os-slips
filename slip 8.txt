Q.1 Write a C program to accept the number of process and resources and find the need matrix 
content and display it. 

#include <stdio.h>

int main() {
    int process, resource, i, j;

    printf("Enter number of Processes: ");
    scanf("%d", &process);
    printf("Enter number of Resources: ");
    scanf("%d", &resource);

    int max[10][10], alloc[10][10], need[10][10];

    printf("\nEnter Max Matrix:\n");
    for (i = 0; i < process; i++) {
        for (j = 0; j < resource; j++) {
            scanf("%d", &max[i][j]);
        }
    }

    printf("\nEnter Allocation Matrix:\n");
    for (i = 0; i < process; i++) {
        for (j = 0; j < resource; j++) {
            scanf("%d", &alloc[i][j]);
        }
    }

    for (i = 0; i < process; i++) {
        for (j = 0; j < resource; j++) {
            need[i][j] = max[i][j] - alloc[i][j];
        }
    }

    printf("\nNeed Matrix:\n");
    for (i = 0; i < process; i++) {
        for (j = 0; j < resource; j++) {
            printf("%d\t", need[i][j]);
        }
        printf("\n");
    }

    return 0;
}


Q.2 Write the simulation program to implement demand paging and show the page 
scheduling and total number of page faults for the following given page reference string. 
Give input n as the number of memory frames. 
Reference String : 12,15,12,18,6,8,11,12,19,12,6,8,12,15,19,8 
Implement OPT


ans
#include <stdio.h>
#define MAX 100

int predict(int referenceString[], int frames[], int refLen, int index, int n) {
    int i, j, farthest = index, pos = -1, found;
    for(i = 0; i < n; i++) {
        found = 0;
        for(j = index; j < refLen; j++) {
            if(frames[i] == referenceString[j]) {
                if(j > farthest) {
                    farthest = j;
                    pos = i;
                }
                found = 1;
                break;
            }
        }
        if(!found)
            return i;
    }
    return (pos == -1) ? 0 : pos;
}

int main() {
    int referenceString[MAX], frames[MAX];
    int refLen, n;
    int i, j, k, pageFaults = 0, found;

    printf("Enter the number of memory frames: ");
    scanf("%d", &n);

    printf("Enter the length of the reference string: ");
    scanf("%d", &refLen);

    printf("Enter the reference string (space-separated):\n");
    for(i = 0; i < refLen; i++) {
        scanf("%d", &referenceString[i]);
    }

    for(i = 0; i < n; i++) {
        frames[i] = -1;
    }

    printf("\nPage Replacement Process (OPT):\n");

    for(i = 0; i < refLen; i++) {
        found = 0;

        for(j = 0; j < n; j++) {
            if(frames[j] == referenceString[i]) {
                found = 1;
                break;
            }
        }

        if(!found) {
            int pos = -1;

            for(j = 0; j < n; j++) {
                if(frames[j] == -1) {
                    pos = j;
                    break;
                }
            }

            if(pos == -1)
                pos = predict(referenceString, frames, refLen, i + 1, n);

            frames[pos] = referenceString[i];
            pageFaults++;
        }

        printf("Step %2d: ", i + 1);
        for(k = 0; k < n; k++) {
            if(frames[k] != -1)
                printf("%d ", frames[k]);
            else
                printf("- ");
        }
        if(found)
            printf(" <- No Page Fault\n");
        else
            printf(" <- Page Fault\n");
    }

    printf("\nTotal Page Faults = %d\n", pageFaults);
    return 0;
}

